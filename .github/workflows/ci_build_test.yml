name: CI Build

on: [push, pull_request]

env:
  RUST_TEST_TIME_UNIT: 150,5000
  RUST_TEST_TIME_INTEGRATION: 150,5000

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]

    steps:
      - name: Remove MSys64 MingW64 Binaries
        if: runner.os == 'Windows'
        # remove this because there is a bad libclang.dll that confuses bindgen
        run: Remove-Item -LiteralPath "C:\msys64\mingw64\bin" -Force -Recurse
      - name: Install Dependencies
        if: runner.os == 'Windows'
        run: choco install llvm -y
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt
      - name: Cargo Build 
        run: cargo build --verbose --workspace
      - name: Cargo Test excluding conformance tests
        run: cargo test --verbose --workspace
      - name: Rustfmt Check
        if: matrix.os == 'ubuntu-20.04'
        run: cargo fmt --verbose --all -- --check
      - name: Run Clippy
        if: matrix.os == 'ubuntu-20.04'
        uses: actions-rs/clippy-check@v1
        with:
          # Adding comments to the PR requires the GITHUB_TOKEN secret.
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      # Cache the `cargo build` so future jobs can reuse build
      - name: Cache cargo build
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

  # Run cargo-deny check and report.
  # Fails if any of the following are found used in the crate or its dependencies.
  #  - any banned crates
  #  - disallowed open source licenses
  #  - use of disallowed repository sources
  # Reports, but does not fail on:
  #  - security advisories
  # See: https://embarkstudios.github.io/cargo-deny/index.html
  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  # Conformance report generation and comparison report generation job will run only after the `Build and Test` job
  # succeeds.
  conformance-report:
    name: Create conformance report for `push` and `pull_request` events
    runs-on: ubuntu-20.04
    steps:
      # Pull down the cached `partiql-lang-rust` build from the `Build and Test` job. This allows us to reuse without
      # needing to rebuild. If pulling the build fails, the subsequent `cargo test` will rebuild.
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      # Run the conformance tests (i.e. `cargo test`) and save to a json file. This uses the "format" unstable compile
      # option to save as json. In the future, may want to use the `cargo_metadata` crate (https://crates.io/crates/cargo_metadata)
      # to format and use the output.
      - name: Cargo Test of the conformance tests (can fail) and save to json file
        continue-on-error: true
        run: cargo test --verbose --package partiql-conformance-tests --features "conformance_test" --release -- -Z unstable-options --ensure-time --format json > cargo_test_results.json
      # Create a conformance report from the `cargo test` json file
      - run: cargo run --features report_tool --bin generate_cts_report cargo_test_results.json ${GITHUB_SHA} cts_report.json
      # Upload conformance report for comparison with future runs
      - name: Upload cts_report.json
        uses: actions/upload-artifact@v3
        with:
          path: cts_report.json
      # Cache the `cargo build` and conformance report for `conformance-report-comparison` job (pull_request event only)
      - name: Cache `cargo build` and conformance report
        if: github.event_name == 'pull_request'
        uses: actions/cache@v3
        id: restore-build-and-conformance
        with:
          path: ./*
          key: ${{ github.sha }}-conformance-report
  conformance-report-comparison:
    name: Create comparison report for `pull_request` event
    runs-on: ubuntu-20.04
    needs: [conformance-report]
    if: github.event_name == 'pull_request'
    steps:
      # Pull down cached `cargo build` and conformance report
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v3
        id: restore-build-and-conformance
        with:
          path: ./*
          key: ${{ github.sha }}-conformance-report
      # Download conformance report from `main` to create comparison report. If `main` has no report, use a backup
      # report (stored in partiql-conformance-tests/backup_conformance_report.json). Alternatively, we could consider
      # - pulling `main` branch and rerun the tests
      # - pulling latest release and rerun the tests
      # - compare to an empty file
      # - don't perform comparisons
      - name: Download cts_report.json from `main` branch
        uses: dawidd6/action-download-artifact@v2
        id: download-report
        continue-on-error: true
        with:
          workflow: ci_build_test.yml
          branch: main
      - name: backup case if download fails
        if: ${{ steps.download-report.outcome == 'failure' }}
        run: mkdir -p artifact && cp -r ./partiql-conformance-tests/backup_conformance_report.json ./artifact/cts_report.json
      # Run conformance report comparison. Generates cts-comparison-report.md
      - run: cargo run --features report_tool --bin generate_comparison_report ./artifact/cts_report.json cts_report.json cts-comparison-report.md
      # Print conformance report to GitHub actions workflow summary page
      - name: print markdown in run
        run: cat cts-comparison-report.md >> $GITHUB_STEP_SUMMARY
      # Find comment w/ conformance comparison if previous comment published
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        continue-on-error: true
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Conformance
      # Create or update (if previous comment exists) with markdown version of comparison report
      - name: Create or update comment
        continue-on-error: true
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: cts-comparison-report.md
          edit-mode: replace
