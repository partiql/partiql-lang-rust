use crate::parse::lexer;
use crate::result::ParseError;

use lalrpop_util as lpop;

use lpop::ErrorRecovery;
use std::str::FromStr;

use partiql_ast::ast;
use partiql_ast::ast::ToAstNode;

use partiql_source_map::location::{ByteOffset, BytePosition, Location, ToLocated};


grammar<'input, 'err>(input: &'input str,
                      errors: &'err mut Vec<ErrorRecovery<ByteOffset, lexer::Token<'input>, ParseError<'input, BytePosition>>>);

pub Query: Box<ast::Expr> = {
    <ExprQuery>,
    <lo:@L> <sfw:SfwQuery> <hi:@R> => Box::new( ast::Expr{ kind: ast::ExprKind::Select(sfw.ast(lo..hi)) } )
}

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                   SFW Query                                    //
//                                                                                //
// ------------------------------------------------------------------------------ //
pub SfwQuery: ast::Select = {
    <SfwClauses>, <FwsClauses>
}

// SQL-style where `Select` precedes `From`
SfwClauses: ast::Select = {
    <with:WithClause?>
    <project:SelectClause>
    <from:FromClause?>
    <where_clause:WhereClause?>
    <group_by:GroupClause?>
    <having:HavingClause?>
    <set:SetOpClause?>
    <order_by:OrderByClause?>
    <limit:LimitClause?>
    <offset:OffsetByClause?> => {
        ast::Select {
            project,
            from,
            from_let: None,
            where_clause,
            group_by,
            having,
            order_by,
            limit,
            offset,
        }
    }
}

// PartiQL-style where `Select` is last
FwsClauses: ast::Select = {
    <with:WithClause?>
    <from:FromClause>
    <where_clause:WhereClause?>
    <group_by:GroupClause?>
    <having:HavingClause?>
    <set:SetOpClause?>
    <order_by:OrderByClause?>
    <limit:LimitClause?>
    <offset:OffsetByClause?>
    <project:SelectClause> => {
        ast::Select {
            project,
            from: Some(from),
            from_let: None,
            where_clause,
            group_by,
            having,
            order_by,
            limit,
            offset,
        }
    }
}

// ------------------------------------------------------------------------------ //
//                                     WITH                                       //
// ------------------------------------------------------------------------------ //
// TODO
WithClause: () = {}

// ------------------------------------------------------------------------------ //
//                                    SELECT                                      //
// ------------------------------------------------------------------------------ //
SelectClause: ast::ProjectionAst = {
    <lo:@L> "SELECT" <strategy: SetQuantifierStrategy> "*" <hi:@R> => ast::Projection {
        kind: ast::ProjectionKind::ProjectStar,
        setq: Some(strategy)
    }.ast(lo..hi),
    <lo:@L> "SELECT" <strategy: SetQuantifierStrategy> <project_items:CommaSepPlus<Projection>> <hi:@R> => ast::Projection {
        kind: ast::ProjectionKind::ProjectList(project_items),
        setq: Some(strategy),
    }.ast(lo..hi),
    <lo:@L> "SELECT" <strategy: SetQuantifierStrategy> "VALUE" <value:ExprQuery> <hi:@R> => ast::Projection {
        kind: ast::ProjectionKind::ProjectValue(value),
        setq: Some(strategy),
    }.ast(lo..hi),
    <lo:@L> "PIVOT" <value:ExprQuery> "AT" <key:ExprQuery> <hi:@R> => ast::Projection {
        kind: ast::ProjectionKind::ProjectPivot { key, value },
        setq: None
    }.ast(lo..hi),
}

#[inline]
SetQuantifierStrategy: ast::SetQuantifier = {
    "ALL" => ast::SetQuantifier::All,
    <distinct: "DISTINCT"?> => {
        match distinct {
            Some(_) => ast::SetQuantifier::Distinct,
            None => ast::SetQuantifier::All,
        }
    }
}

#[inline]
Projection: ast::ProjectItemAst = {
    <lo:@L> <expr:ExprQuery> <hi:@R>
        => ast::ProjectItem::ProjectExpr( ast::ProjectExpr{ expr, as_alias: None } ).ast(lo..hi),
    <lo:@L> <expr:ExprQuery> "AS"? <ident:"Identifier"> <hi:@R> => {
        let as_alias = Some( ast::SymbolPrimitive{ value:ident.to_owned()} );
        ast::ProjectItem::ProjectExpr( ast::ProjectExpr{ expr, as_alias } ).ast(lo..hi)
    },
}

// ------------------------------------------------------------------------------ //
//                                     FROM                                       //
// ------------------------------------------------------------------------------ //
FromClause: ast::FromClauseAst = {
    <lo:@L> "FROM" <mut froms:(<TableReference> "," "LATERAL"?)*> <last:TableReference> <hi:@R> => {
        let total: Location<BytePosition> = Location::from(lo.into()..hi.into());
	
        // use `reduce` to process the comma-seperated `TableReference`s
        //   as left-associative `CROSS JOIN`s
        froms.push(last);
        froms.into_iter()
            .reduce(|lfrom, rfrom| {
	            let start = lfrom.location.as_ref().unwrap_or(&total).start.0.clone();
                let end = rfrom.location.as_ref().unwrap_or(&total).end.0.clone();
                let range = start..end;
                let join = ast::Join {
                    kind: ast::JoinKind::Cross,
                    left: Box::new(lfrom),
                    right: Box::new(rfrom),
                    predicate: None
                };
                ast::FromClause::Join( join.ast(range.clone()) ).ast(range)
            })
            .unwrap() // safe, because we know there's at least 1 input
    }
}

TableReference: ast::FromClauseAst = {
    <TableNonJoin>,
    <TableJoined>,
}

TableNonJoin: ast::FromClauseAst = {
    <lo:@L> <t:TableBaseReference> <hi:@R> => ast::FromClause::FromLet( t ).ast(lo..hi),
    <lo:@L> <t:TableUnpivot> <hi:@R> => ast::FromClause::FromLet( t ).ast(lo..hi),
}

#[inline]
TableBaseReference: ast::FromLetAst = {
    <lo:@L> <e:ExprQuery> <hi:@R> => {
        ast::FromLet {
            expr: e,
            kind: ast::FromLetKind::Scan,
            as_alias: None,
            at_alias: None,
            by_alias: None
        }.ast(lo..hi)
    },
    <lo:@L> <e:ExprQuery> "AS"? <ident_as:"Identifier"> <hi:@R> => {
        ast::FromLet {
            expr: e,
            kind: ast::FromLetKind::Scan,
            as_alias: Some(ast::SymbolPrimitive{ value: ident_as.to_owned() }),
            at_alias: None,
            by_alias: None
        }.ast(lo..hi)
    }
}

#[inline]
TableUnpivot: ast::FromLetAst = {
    <lo:@L> "UNPIVOT" <e:ExprQuery> "AS"? <ident_as:"Identifier"> "AT" <ident_at:"Identifier"> <hi:@R> => {
        ast::FromLet {
            expr: e,
            kind: ast::FromLetKind::Unpivot,
            as_alias: Some(ast::SymbolPrimitive{ value: ident_as.to_owned() }),
            at_alias: Some(ast::SymbolPrimitive{ value: ident_at.to_owned() }),
            by_alias: None,
        }.ast(lo..hi)
    }
}

TableJoined: ast::FromClauseAst = {
    <TableCrossJoin>,
    <TableQualifiedJoin>,
    "(" <TableJoined> ")",
}

#[inline]
TableCrossJoin: ast::FromClauseAst = {
    // Note the `TableReference` on the lhs and the `TableNonJoin` on the rhs of the `JOIN`.
    // This is to prevent ambiguity in the grammar and effectively treats `JOIN` like
    //    a left-associative operator
    <lo:@L> <ltable:TableReference> "CROSS" "JOIN" <rtable:TableNonJoin> <hi:@R> => {
        let join = ast::Join {
            kind: ast::JoinKind::Cross,
            left: Box::new(ltable),
            right: Box::new(rtable),
            predicate: None
        };
        ast::FromClause::Join( join.ast(lo..hi) ).ast(lo..hi)
    }
}

#[inline]
TableQualifiedJoin: ast::FromClauseAst = {
    // Note the `TableReference` on the lhs and the `TableNonJoin` on the rhs of the `JOIN`.
    // This is to prevent ambiguity in the grammar and effectively treats `JOIN` like
    //    a left-associative operator
    <lo:@L> <ltable:TableReference> <j:JoinType> "JOIN" "LATERAL"? <rtable:TableNonJoin> <on:JoinSpec> <hi:@R> => {
        let join = ast::Join {
            kind: j,
            left: Box::new(ltable),
            right: Box::new(rtable),
            predicate: Some(on),
        };
        ast::FromClause::Join( join.ast(lo..hi) ).ast(lo..hi)
    },
    // Note the `TableReference` on the lhs and the `TableNonJoin` on the rhs of the `JOIN`.
    // This is to prevent ambiguity in the grammar and effectively treats `JOIN` like
    //    a left-associative operator
    <lo:@L> <ltable:TableReference> <spec:JoinSpecNatural> <j:JoinType> "JOIN" "LATERAL"? <rtable:TableNonJoin> <hi:@R> => {
        let join = ast::Join {
            kind: j,
            left: Box::new(ltable),
            right: Box::new(rtable),
            predicate: Some(spec)
        };
        ast::FromClause::Join( join.ast(lo..hi) ).ast(lo..hi)
    }
}
#[inline]
JoinSpecNatural: ast::JoinSpecAst = {
    <lo:@L> "NATURAL" <hi:@R> => ast::JoinSpec::Natural.ast(lo..hi)
}
#[inline]
JoinType: ast::JoinKind = {
    "INNER" => ast::JoinKind::Inner,
    "LEFT" "OUTER"? => ast::JoinKind::Left,
    "RIGHT" "OUTER"? => ast::JoinKind::Right,
    "FULL" "OUTER"? => ast::JoinKind::Full,
}
#[inline]
JoinSpec: ast::JoinSpecAst = {
    <lo:@L> "ON" <e:ExprQuery> <hi:@R> => ast::JoinSpec::On(e).ast(lo..hi),
    <lo:@L> "USING" "(" <paths:CommaSepPlus<PathExpr>> ")" <hi:@R> => ast::JoinSpec::Using( paths ).ast(lo..hi),
}

// ------------------------------------------------------------------------------ //
//                                     WHERE                                      //
// ------------------------------------------------------------------------------ //
WhereClause: Box<ast::Expr> = { "WHERE" <ExprQuery> }

// ------------------------------------------------------------------------------ //
//                                   GROUP BY                                     //
// ------------------------------------------------------------------------------ //
GroupClause: Box<ast::GroupByExprAst> = {
    <lo:@L> "GROUP" <strategy: GroupStrategy> "BY" <keys:CommaSepPlus<GroupKey>> <group_as_alias:GroupAlias?> <hi:@R> => {
        Box::new(ast::GroupByExpr{
            strategy,
            key_list: ast::GroupKeyList{ keys },
            group_as_alias,
        }.ast(lo..hi))
    }
}
#[inline]
GroupStrategy: ast::GroupingStrategy = {
    "ALL" => ast::GroupingStrategy::GroupFull,
    <partial:"PARTIAL"?> => {
        match partial {
            Some(_) => ast::GroupingStrategy::GroupPartial,
            None => ast::GroupingStrategy::GroupFull,
        }
    }
}
#[inline]
GroupKey: ast::GroupKeyAst = {
    <lo:@L> <expr:ExprQuery> <hi:@R>
        => ast::GroupKey{ expr, as_alias: None }.ast(lo..hi),
    <lo:@L> <expr:ExprQuery> "AS" <ident:"Identifier"> <hi:@R>
        => ast::GroupKey{ expr, as_alias: Some( ast::SymbolPrimitive{ value:ident.to_owned()} ) }.ast(lo..hi),
}
#[inline]
GroupAlias: ast::SymbolPrimitive = {
    "GROUP" "AS" <ident:"Identifier"> => ast::SymbolPrimitive{ value:ident.to_owned() }
}

// ------------------------------------------------------------------------------ //
//                                    HAVING                                      //
// ------------------------------------------------------------------------------ //
HavingClause: Box<ast::Expr> = { "HAVING" <ExprQuery> }

// ------------------------------------------------------------------------------ //
//                            UNION/INTERSECT/EXCEPT                              //
// ------------------------------------------------------------------------------ //
// TODO
SetOpClause: () = {}

// ------------------------------------------------------------------------------ //
//                                   ORDER BY                                     //
// ------------------------------------------------------------------------------ //
OrderByClause: Box<ast::OrderByExprAst> = {
    <lo:@L> "ORDER" "BY" "PRESERVE" <hi:@R> => Box::new( ast::OrderByExpr{ sort_specs: vec![] }.ast(lo..hi) ),
    <lo:@L> "ORDER" "BY" <sort_specs: CommaSepPlus<OrderSortSpec>> <hi:@R> => Box::new( ast::OrderByExpr{ sort_specs }.ast(lo..hi) ),
}
#[inline]
OrderSortSpec: ast::SortSpecAst = {
    <lo:@L> <expr:ExprQuery> <ordering_spec:BySpec?> <null_ordering_spec:ByNullSpec?> <hi:@R>
        => ast::SortSpec { expr, ordering_spec, null_ordering_spec }.ast(lo..hi)
}
#[inline]
BySpec: ast::OrderingSpec = {
    "ASC" => ast::OrderingSpec::Asc,
    "DESC" => ast::OrderingSpec::Desc,
}
#[inline]
ByNullSpec: ast::NullOrderingSpec = {
    "NULLS" "FIRST" => ast::NullOrderingSpec::First,
    "NULLS" "LAST" => ast::NullOrderingSpec::Last,
}

// ------------------------------------------------------------------------------ //
//                                     LIMIT                                      //
// ------------------------------------------------------------------------------ //
LimitClause: Box<ast::Expr> = { "LIMIT" <ExprQuery> }

// ------------------------------------------------------------------------------ //
//                                     OFFSET                                     //
// ------------------------------------------------------------------------------ //
OffsetByClause: Box<ast::Expr> = { "OFFSET" <ExprQuery> }

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                   Expr Query                                   //
//                                                                                //
// ------------------------------------------------------------------------------ //

// Note: the `Expr` rules are formulated in a precise way to assure 'natural'
//    interpretation of mathematical expressions in an LR grammar while attempting
//    to stay in accordance with SQL interpretations.
//
// In particular:
//    - in order to assure operator precedence, the lowest precedence operators
//      (i.e., `OR`) are at the top of the recursion tree, and the highest
//      precedence are at the bottom (i.e., `<PathExpr>`)
//    - left-associative operators (i.e., '+', '-', '*', '/') are expressed as
//      left-self-recursive rules, while right-associative operators
//      (i.e., unary '-', '^) are expressed as right-self-recursive rules
//
// In the parsing tutorials and academic literature, you will often see the above
//     structure in the 'classical expression grammar':
//                 Expr -> Expr '+' Factor | Expr '-' Factor | Factor
//                 Factor -> Factor '*' Term | Factor '/' Term | Term
//                 Term -> number
//
// Instead of trying to come up with other synonyms to Expr/Factor/Term, the rules
//      here are named directly for their numeric level in the precedence table
//      in the form ExprPrecedence<NN>
//
// PartiQL's precedence levels:
// |-------+-------------------+---------------+------------------------------------|
// | Level | Operator          | Associativity | Description                        |
// |-------+-------------------+---------------+------------------------------------|
// |     1 | <Path Expression> | left          | e.g., `field`,  `binding.field[2]` |
// |     2 | <Function call>   | left          | e.g., `upper(field_reference)`     |
// |     3 | + -               | right         | unary plus, unary minus            |
// |     4 | ^                 | left          | exponentiation                     |
// |     5 | * / %             | left          | multiplication, division, modulo   |
// |     6 | + -               | left          | addition, subtraction              |
// |     7 | <other>           | left          | other operators, e.g., `||`
// |     8 | BETWEEN IN LIKE   |               | range/set/pattern compare          |
// |     9 | < > <= >=         |               | comparison operators               |
// |    10 | = <> !=           |               | equality operators                 |
// |    11 | IS                |               | IS [NOT] NULL                      |
// |    12 | NOT               | right         | logical negate                     |
// |    13 | AND               | left          | logical conjuct                    |
// |    14 | OR                | left          | logical disjunct                   |
// |-------+-------------------+---------------+------------------------------------|
//
// See https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages
// See https://en.wikipedia.org/wiki/Order_of_operations#Special_cases


pub ExprQuery: Box<ast::Expr> = {
    <e:ExprPrecedence14> => Box::new(e)
}

ExprPrecedence14: ast::Expr = {
    <lo:@L> <l:ExprPrecedence14> "OR" <r:ExprPrecedence13> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Or,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence13>,
}

ExprPrecedence13: ast::Expr = {
    <lo:@L> <l:ExprPrecedence13> "AND" <r:ExprPrecedence12> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::And,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence12>,
}

ExprPrecedence12: ast::Expr = {
    <lo:@L> "NOT" <r:ExprPrecedence12> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Not,
               expr: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence11>,
}

ExprPrecedence11: ast::Expr = {
    <lo:@L> <l:ExprPrecedence11> "IS" <r:ExprPrecedence10> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Is,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence11> "IS" "NOT" <r:ExprPrecedence10> <hi:@R> => {
       let is =  ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Is,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )};
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Not,
               expr: Box::new(is),
           }.ast(lo..hi)
       )}
    },
    <ExprPrecedence10>
}

ExprPrecedence10: ast::Expr = {
    <lo:@L> <l:ExprPrecedence10> "=" <r:ExprPrecedence09> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Eq,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence10> "!=" <r:ExprPrecedence09> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Ne,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence10> "<>" <r:ExprPrecedence09> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Ne,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence09>,
}

ExprPrecedence09: ast::Expr = {
    <lo:@L> <l:ExprPrecedence08> "<" <r:ExprPrecedence08> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Lt,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence08> ">" <r:ExprPrecedence08> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Gt,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence08> "<=" <r:ExprPrecedence08> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Lte,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence08> ">=" <r:ExprPrecedence08> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Gte,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence08>,
}

ExprPrecedence08: ast::Expr = {
    <lo:@L> <value:ExprPrecedence08> "BETWEEN" <from:ExprPrecedence07> "AND" <to:ExprPrecedence07> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::Between( ast::Between{ value: Box::new(value), from: Box::new(from), to: Box::new(to) }.ast(lo..hi) ) },
    <lo:@L> <value:ExprPrecedence08> "NOT" "BETWEEN" <from:ExprPrecedence07> "AND" <to:ExprPrecedence07> <hi:@R> => {
       let between = ast::Expr{ kind: ast::ExprKind::Between( ast::Between{ value: Box::new(value), from: Box::new(from), to: Box::new(to) }.ast(lo..hi) ) };
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Not,
               expr: Box::new(between),
           }.ast(lo..hi)
       )}
    },
    <lo:@L> <value:ExprPrecedence08> "LIKE" <pattern:ExprPrecedence07> <escape:LikeEscape?> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::Like( ast::Like{ value: Box::new(value), pattern: Box::new(pattern), escape }.ast(lo..hi) ) },
    <lo:@L> <value:ExprPrecedence08> "NOT" "LIKE" <pattern:ExprPrecedence07> <escape:LikeEscape?> <hi:@R>  => {
       let like = ast::Expr{ kind: ast::ExprKind::Like( ast::Like{ value: Box::new(value), pattern: Box::new(pattern), escape }.ast(lo..hi) ) };
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Not,
               expr: Box::new(like),
           }.ast(lo..hi)
       )}
    },
    <lo:@L> <l:ExprPrecedence08> "IN" <r:ExprPrecedence07> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::In( ast::In{ operands: vec![Box::new(l),Box::new(r)] }.ast(lo..hi) ) },
    <lo:@L> <l:ExprPrecedence08> "NOT" "IN" <r:ExprPrecedence07> <hi:@R> => {
       let in_expr = ast::Expr{ kind: ast::ExprKind::In( ast::In{ operands: vec![Box::new(l),Box::new(r)] }.ast(lo..hi) ) };
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Not,
               expr: Box::new(in_expr),
           }.ast(lo..hi)
       )}
    },
    <ExprPrecedence07>,
}
#[inline]
LikeEscape: Box<ast::Expr> = {
    "ESCAPE" <e:ExprPrecedence07> => Box::new(e)
}

ExprPrecedence07: ast::Expr = {
    <lo:@L> <l:ExprPrecedence07> "||" <r:ExprPrecedence06> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Concat,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence06>,
}

ExprPrecedence06: ast::Expr = {
    <lo:@L> <l:ExprPrecedence06> "+" <r:ExprPrecedence05> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Add,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence06> "-" <r:ExprPrecedence05> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Neg,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence05>,
}

ExprPrecedence05: ast::Expr = {
    <lo:@L> <l:ExprPrecedence05> "*" <r:ExprPrecedence04> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Mul,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence05> "/" <r:ExprPrecedence04> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Div,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> <l:ExprPrecedence05> "%" <r:ExprPrecedence04> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Mod,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence04>,
}

ExprPrecedence04: ast::Expr = {
    <lo:@L> <l:ExprPrecedence04> "^" <r:ExprPrecedence03> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::BinOp(
           ast::BinOp {
               kind: ast::BinOpKind::Exp,
               lhs: Box::new(l),
               rhs: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence03>,
}

ExprPrecedence03: ast::Expr = {
    <lo:@L> "+" <r:ExprPrecedence03> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Pos,
               expr: Box::new(r),
           }.ast(lo..hi)
       )},
    <lo:@L> "-" <r:ExprPrecedence03> <hi:@R> =>
       ast::Expr{ kind: ast::ExprKind::UniOp(
           ast::UniOp {
               kind: ast::UniOpKind::Neg,
               expr: Box::new(r),
           }.ast(lo..hi)
       )},
    <ExprPrecedence02>,
}

#[inline]
ExprPrecedence02: ast::Expr = {
    <lo:@L> <call:FunctionCall> <hi:@R> => ast::Expr{ kind: ast::ExprKind::Call( call.ast(lo..hi) ) },
    <ExprPrecedence01>,
}

#[inline]
ExprPrecedence01: ast::Expr = {<ExprTerm>,}

pub ExprTerm: ast::Expr = {
    "(" <q:Query> ")" => *q,
    <lo:@L> <lit:Literal> <hi:@R> => ast::Expr{ kind: ast::ExprKind::Lit( lit.ast(lo..hi) ) },
    <lo:@L> <path:PathExpr> <hi:@R> => ast::Expr{ kind: ast::ExprKind::Path( path.ast(lo..hi) ) },
    <lo:@L> "{" <fields:CommaTermStar<ExprPair>> "}" <hi:@R> => ast::Expr{ kind: ast::ExprKind::Struct( ast::Struct{fields}.ast(lo..hi) ) },
    <lo:@L> "[" <values:CommaTermStar<ExprQuery>> "]" <hi:@R> => ast::Expr{ kind: ast::ExprKind::List( ast::List{values}.ast(lo..hi) ) },
    <lo:@L> "(" <values:CommaTermPlus<ExprQuery>> ")" <hi:@R> => ast::Expr{ kind: ast::ExprKind::List( ast::List{values}.ast(lo..hi) ) },
    <lo:@L> "<<" <values:CommaTermStar<ExprQuery>> ">>" <hi:@R> => ast::Expr{ kind: ast::ExprKind::Bag( ast::Bag{values}.ast(lo..hi) ) },
    ! => { errors.push(<>); ast::Expr{ kind: ast::ExprKind::Error} },
}

ExprPair: ast::ExprPair = {
    <lo:@L> <first:ExprQuery> ":" <second:ExprQuery> <hi:@R> => ast::ExprPair{ first, second },
}

#[inline]
FunctionCall: ast::Call = {
    <func_name:"Identifier"> "(" <strategy: SetQuantifierStrategy> ")" =>
        ast::Call {
            func_name: ast::SymbolPrimitive{ value: func_name.to_owned() },
            args: Vec::new(),
            setq: Some(strategy)
        },
     <func_name:"Identifier"> "(" <strategy: SetQuantifierStrategy> "*" ")" =>
         ast::Call {
            func_name: ast::SymbolPrimitive{ value: func_name.to_owned() },
            args: Vec::new(),
            setq: Some(strategy)
         },
    <func_name:"Identifier"> "(" <strategy: SetQuantifierStrategy> <args:CommaSepPlus<ExprQuery>> ")" =>
        ast::Call {
            func_name: ast::SymbolPrimitive{ value: func_name.to_owned() },
            args,
            setq: Some(strategy)
        },
}

PathExpr: ast::Path = {
    <lo:@L> <path:PathExpr> "." <ident:"Identifier"> <hi:@R> => {
        let step = ast::PathStep::PathExpr(
            ast::PathExpr{
                index: Box::new(ast::Expr{
                    kind: ast::ExprKind::VarRef(ast::VarRef {
                        name: ast::SymbolPrimitive { value: ident.to_owned() },
                        case: ast::CaseSensitivity::CaseInsensitive,
                        qualifier: ast::ScopeQualifier::Unqualified
                    }.ast(lo..hi)),
                }),
                case: ast::CaseSensitivity::CaseInsensitive,
            });

        let mut steps = path.steps;
        steps.push(step);
        ast::Path{ root:path.root, steps }
    },
    <lo:@L> <ident:"Identifier"> <hi:@R> => {
        let root = ast::Expr{
            kind: ast::ExprKind::VarRef(ast::VarRef {
                name: ast::SymbolPrimitive { value: ident.to_owned() },
                case: ast::CaseSensitivity::CaseInsensitive,
                qualifier: ast::ScopeQualifier::Unqualified
            }.ast(lo..hi)),
        };
        ast::Path{ root: Box::new(root), steps: vec![] }
    },
    <lo:@L> <ident:"AtIdentifier"> <hi:@R> => {
        let root = ast::Expr{
            kind: ast::ExprKind::VarRef(ast::VarRef {
                name: ast::SymbolPrimitive { value: ident.to_owned() },
                case: ast::CaseSensitivity::CaseInsensitive,
                qualifier: ast::ScopeQualifier::Qualified
            }.ast(lo..hi)),
        };
        ast::Path{ root: Box::new(root), steps: vec![] }
    },
}


// ------------------------------------------------------------------------------ //
//                                                                                //
//                                Literal Values                                  //
//                                                                                //
// ------------------------------------------------------------------------------ //

pub Literal: ast::Lit = {
    <LiteralAbsent>,
    <LiteralScalar>,
    <LiteralIon>,
    // TODO other literals?
};

#[inline]
LiteralAbsent: ast::Lit = {
    "NULL" => ast::Lit::Null,
    "MISSING" => ast::Lit::Missing,
}
#[inline]
LiteralScalar: ast::Lit = {
    <LiteralString>,
    <LiteralBool>,
    <LiteralNumber>
}
#[inline]
LiteralString: ast::Lit = {
    <s:"String"> => ast::Lit::CharStringLit(s.to_owned()),
}
#[inline]
LiteralBool: ast::Lit = {
    "TRUE" => ast::Lit::BoolLit(true),
    "FALSE" => ast::Lit::BoolLit(false),
}
#[inline]
LiteralNumber: ast::Lit = {
    // TODO check bounds before parsing?

    <lo:@L> <n:"Int"> <hi:@R> =>? {
        n.parse()
	        .map(|n| ast::Lit::Int64Lit(n))
		    .map_err(|_| lpop::ParseError::User{
	     	    error: ParseError::SyntaxError(
		            "invalid literal".to_string().to_located(BytePosition::from(lo)..BytePosition::from(hi)))
	         })
    },
    <lo:@L> <r:"Real"> <hi:@R> =>? {
        rust_decimal::Decimal::from_str(r)
	        .map(|n| ast::Lit::DecimalLit(n))
		    .map_err(|_| lpop::ParseError::User{
	     	    error: ParseError::SyntaxError(
		            "invalid literal".to_string().to_located(BytePosition::from(lo)..BytePosition::from(hi)))
	         })
    },
    <lo:@L> <r:"ExpReal"> <hi:@R> =>? {
        rust_decimal::Decimal::from_scientific(r)
	        .map(|n| ast::Lit::DecimalLit(n))
		    .map_err(|_| lpop::ParseError::User{
	     	    error: ParseError::SyntaxError(
		            "invalid literal".to_string().to_located(BytePosition::from(lo)..BytePosition::from(hi)))
	         })
    },
}
#[inline]
LiteralIon: ast::Lit = {
    <ion:"Ion"> => ast::Lit::IonStringLit(ion.to_owned()),
}


// ------------------------------------------------------------------------------ //
//                                                                                //
//                                  Utilities                                     //
//                                                                                //
// ------------------------------------------------------------------------------ //

// Comma as terminator (i.e. "<T>, <T>, <T>," where final comma is optional); may be empty
// This is a macro; see http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
CommaTermStar<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Comma as terminator (i.e. "<T>, <T>, <T>," where final comma is optional); at least 1 arg
// This is a macro; see http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
CommaTermPlus<T>: Vec<T> = {
    <mut v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Comma as separator (i.e. "<T>, <T>, <T>"); may be empty
// This is a macro; see http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
CommaSepStar<T>: Vec<T> = {
    <e:T?> <mut v:("," <T>)*> => match e {
         None => vec![],
         Some(e) => {
             v.insert(0,e);
             v
        }
    }
};

// Comma as separator (i.e. "<T>, <T>, <T>"); at least 1 arg
// This is a macro; see http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
CommaSepPlus<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
};

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                    Lexer                                       //
//                                                                                //
// ------------------------------------------------------------------------------ //

// The lexer is external; See [`lexer.rs`] for its definition.
//
// See also http://lalrpop.github.io/lalrpop/lexer_tutorial/002_writing_custom_lexer.html
extern {
    type Location = ByteOffset;
    type Error = ParseError<'input, BytePosition>;

    enum lexer::Token<'input> {

        // Brackets
        "[" => lexer::Token::OpenSquare,
        "]" => lexer::Token::CloseSquare,
        "{" => lexer::Token::OpenCurly,
        "}" => lexer::Token::CloseCurly,
        "(" => lexer::Token::OpenParen,
        ")" => lexer::Token::CloseParen,
        "<<" => lexer::Token::OpenDblAngle,
        ">>" => lexer::Token::CloseDblAngle,

        // Punc
        "," => lexer::Token::Comma,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "." => lexer::Token::Period,
        "-" => lexer::Token::Minus,
        "+" => lexer::Token::Plus,
        "*" => lexer::Token::Star,
        "/" => lexer::Token::Slash,
        "%" => lexer::Token::Percent,
        "^" => lexer::Token::Caret,
        "||" => lexer::Token::DblPipe,

        "=" => lexer::Token::Equal,
        "==" => lexer::Token::EqualEqual,
        "!=" => lexer::Token::BangEqual,
        "<>" => lexer::Token::LessGreater,

        "<" => lexer::Token::LessThan,
        ">" => lexer::Token::GreaterThan,
        "<=" => lexer::Token::LessEqual,
        ">=" => lexer::Token::GreaterEqual,


        // Types
        "Identifier" => lexer::Token::Identifier(<&'input str>),
        "AtIdentifier" => lexer::Token::AtIdentifier(<&'input str>),
        "Int" => lexer::Token::Int(<&'input str>),
        "Real" => lexer::Token::Real(<&'input str>),
        "ExpReal" => lexer::Token::ExpReal(<&'input str>),
        "String" => lexer::Token::String(<&'input str>),
        "Ion" => lexer::Token::Ion(<&'input str>),

        // Keywords
        "ALL" => lexer::Token::All,
        "ASC" => lexer::Token::Asc,
        "AND" => lexer::Token::And,
        "AS" => lexer::Token::As,
        "AT" => lexer::Token::At,
        "BETWEEN" => lexer::Token::Between,
        "BY" => lexer::Token::By,
        "CROSS" => lexer::Token::Cross,
        "DESC" => lexer::Token::Desc,
        "DISTINCT" => lexer::Token::Distinct,
        "ESCAPE" => lexer::Token::Escape,
        "EXCEPT" => lexer::Token::Except,
        "FALSE" => lexer::Token::False,
        "FIRST" => lexer::Token::First,
        "FULL" => lexer::Token::Full,
        "FROM" => lexer::Token::From,
        "GROUP" => lexer::Token::Group,
        "HAVING" => lexer::Token::Having,
        "IN" => lexer::Token::In,
        "INNER" => lexer::Token::Inner,
        "INTERSECT" => lexer::Token::Intersect,
        "IS" => lexer::Token::Is,
        "JOIN" => lexer::Token::Join,
        "LAST" => lexer::Token::Last,
        "LATERAL" => lexer::Token::Lateral,
        "LEFT" => lexer::Token::Left,
        "LIKE" => lexer::Token::Like,
        "LIMIT" => lexer::Token::Limit,
        "MISSING" => lexer::Token::Missing,
        "NATURAL" => lexer::Token::Natural,
        "NOT" => lexer::Token::Not,
        "NULL" => lexer::Token::Null,
        "NULLS" => lexer::Token::Nulls,
        "OFFSET" => lexer::Token::Offset,
        "ON" => lexer::Token::On,
        "OR" => lexer::Token::Or,
        "ORDER" => lexer::Token::Order,
        "OUTER" => lexer::Token::Outer,
        "PARTIAL" => lexer::Token::Partial,
        "PIVOT" => lexer::Token::Pivot,
        "PRESERVE" => lexer::Token::Preserve,
        "RIGHT" => lexer::Token::Right,
        "SELECT" => lexer::Token::Select,
        "TRUE" => lexer::Token::True,
        "UNION" => lexer::Token::Union,
        "UNPIVOT" => lexer::Token::Unpivot,
        "USING" => lexer::Token::Using,
        "VALUE" => lexer::Token::Value,
        "WHERE" => lexer::Token::Where,
        "WITH" => lexer::Token::With,
    }
}