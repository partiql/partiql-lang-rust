WHITESPACE = _{ " " | "\t" | "\x0B" | "\x0C" | "\r" | "\n" }

COMMENT = _{ comment_line | comment_block }

WB = _{ WHITESPACE | COMMENT }

comment_block    = _{ "/*" ~ (comment_block | (!"*/" ~ ANY))* ~ "*/" }
comment_line     = _{ "--" ~ (!"\n" ~ ANY )* ~ "\n" }

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                     Query                                      //
//                                                                                //
// ------------------------------------------------------------------------------ //

query_full = { SOI ~ query ~ EOI }
query = { sfw_query | expr_query }

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                   SFW Query                                    //
//                                                                                //
// ------------------------------------------------------------------------------ //

sfw_query = {
    /// SQL-style where `Select` precedes `From`
    with_clause? ~
    select_clause ~
    from_clause? ~
    where_clause? ~
    group_by_clause? ~
    having_clause? ~
    set_op_clause? ~
    order_by_clause? ~
    limit_clause? ~
    offset_clause?

    |

    /// PartiQL-style where `Select` is last
    with_clause? ~
    from_clause ~
    where_clause? ~
    group_by_clause? ~
    having_clause? ~
    set_op_clause? ~
    order_by_clause? ~
    limit_clause? ~
    offset_clause? ~
    select_clause
}

// ------------------------------------------------------------------------------ //
//                                     WITH                                       //
// ------------------------------------------------------------------------------ //
with_clause = { "TODO" }

// ------------------------------------------------------------------------------ //
//                                    SELECT                                      //
// ------------------------------------------------------------------------------ //
select_clause = { select_value_clause | pivot_clause | select_sql_clause }
select_value_clause = { K_select ~ K_value ~ expr_query }
pivot_clause = { K_pivot ~ expr_query ~ K_at ~ expr_query }
select_sql_clause =  { K_select ~ out_bindings }

out_bindings = _{ out_binding ~ ("," ~ out_binding )* }
out_binding = { expr_query ~ (K_as ~ attr_name)? }

// ------------------------------------------------------------------------------ //
//                                     FROM                                       //
// ------------------------------------------------------------------------------ //
from_clause = { K_from ~ table_references }
table_references = _{ table_reference ~ ("," ~ K_lateral? ~ table_reference )* }
table_reference = _{ table_joined | table_unpivot | table_base_reference }
table_unpivot = { K_unpivot ~ expr_query ~ K_as? ~ correlation_name ~ K_at ~ correlation_name }
table_base_reference = { expr_query ~ ( correlation_spec )? }

correlation_spec = _{ K_as? ~ correlation_name }
correlation_name = _{ !(reserved_join) ~ !(reserved_clause) ~ identifier }

table_joined = { table_cross_join | table_qualified_join | "(" ~ table_joined ~ ")" }
table_cross_join = { table_base_reference ~ K_cross ~ K_join ~ K_lateral? ~ table_reference }
table_qualified_join = _{ table_natural_join | table_join_spec }
table_natural_join = {
      table_base_reference ~ K_natural ~ join_type? ~ K_join ~ K_lateral? ~ table_reference
}
table_join_spec = {
      table_base_reference ~ join_type? ~ K_join ~ K_lateral? ~ table_reference ~ join_spec
}
join_type = { K_inner | (join_outer_type ~ K_outer?) }
join_outer_type = { K_left | K_right | K_full }
join_spec = {
      K_on ~ search_condition
    | K_using ~ "(" ~ path_expr_list ~ ")"
}


// ------------------------------------------------------------------------------ //
//                                     WHERE                                      //
// ------------------------------------------------------------------------------ //
where_clause = { K_where ~ search_condition }

// ------------------------------------------------------------------------------ //
//                                   GROUP BY                                     //
// ------------------------------------------------------------------------------ //
group_by_clause = { K_group ~ group_all? ~ K_by ~ group_out_bindings ~ group_as? }
group_out_bindings = { out_bindings }
group_all = {K_all}
group_as = {K_group ~ K_as ~ attr_name}

// ------------------------------------------------------------------------------ //
//                                    HAVING                                      //
// ------------------------------------------------------------------------------ //
having_clause = { K_having ~ search_condition }
search_condition = _{ expr_query }

// ------------------------------------------------------------------------------ //
//                            UNION/INTERSECT/EXCEPT                              //
// ------------------------------------------------------------------------------ //
set_op_clause = { "TODO" }

// ------------------------------------------------------------------------------ //
//                                   ORDER BY                                     //
// ------------------------------------------------------------------------------ //
order_by_clause = { K_order ~ K_by ~ ( order_sort_preserve | order_sort_spec_list ) }
order_sort_preserve = { K_preserve }
order_sort_spec_list = { order_sort_spec ~ ("," ~ order_sort_spec )* }
order_sort_spec = { expr_query ~ order_by_spec? ~ order_by_null_spec? }
order_by_spec = { K_asc | K_desc }
order_by_null_spec = { K_nulls ~ (K_first | K_last) }

// ------------------------------------------------------------------------------ //
//                                     LIMIT                                      //
// ------------------------------------------------------------------------------ //
limit_clause = { K_limit ~ expr_query }

// ------------------------------------------------------------------------------ //
//                                     OFFSET                                     //
// ------------------------------------------------------------------------------ //
offset_clause = { K_offset ~ expr_query }

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                   Expr Query                                   //
//                                                                                //
// ------------------------------------------------------------------------------ //

// AND/OR require explicit whitespace around them, so disable implicit whitespace for this rule
expr_query = {
        expr_term ~ op_bool ~ expr_query
      | expr_term  ~ op_infix ~ expr_query
      | op_prefix ~ expr_query
      | expr_term
}

expr_term = {
      "(" ~ query ~ ")"
    | expr_function_call
    | literal
    | path_expr
    | expr_tuple
    | expr_array
    | expr_bag
}

expr_tuple = {
    "{" ~ (expr_query ~ ":" ~ expr_query ~ ("," ~ expr_query ~ ":" ~ expr_query )* )? ~ "}"
}
expr_array = { "[" ~ (expr_query ~ ("," ~ expr_query)* )? ~ "]" }
expr_bag = { "<<" ~ (expr_query ~ ("," ~ expr_query)* )? ~ ">>" }

path_expr = {
      "*"
    | identifier ~ "." ~ "*"
    | identifier ~ "[" ~ "*" ~ "]"
    | identifier ~ "." ~ path_expr
    | identifier ~ "[" ~ expr_query ~ "]"
    | identifier
}
path_expr_list = { path_expr ~ ("," ~ path_expr )*}

expr_function_call = { function_name ~ "(" ~ expr_function_args ~ ")" }
expr_function_args = _{ expr_function_arg ~ ("," ~ expr_function_arg )*  }
expr_function_arg  = _{ expr_query }

// Operators
op_infix = { op_caret | op_math | op_comp }
op_prefix = _{ op_un_minus | op_un_plus }

op_bool = {
   !(K_order) ~ (K_and | K_or)
}

op_math = _{
      op_multiply | op_divide | op_modulus
    | op_add | op_subtract
}

op_comp = _{
      op_eq | op_neq
    | op_lt | op_gt | op_lteq | op_gteq
}

op_un_plus  = { "+" }
op_un_minus = { "-" }

op_caret    = { "^" }
op_multiply = { "*" }
op_divide   = { "/" }
op_modulus  = { "%" }
op_add      = { "+" }
op_subtract = { "-" }
op_eq       = { "=" | "=="}
op_neq      = { "<>" | "!=" }
op_lt       = { "<" }
op_gt       = { ">" }
op_lteq     = { "<=" }
op_gteq     = { ">=" }

//
// TODO
//
attr_name = _{ identifier }
function_name = _{ identifier }

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                Literal Values                                  //
//                                                                                //
// ------------------------------------------------------------------------------ //

literal = { literal_absent | literal_scalar | literal_tuple | literal_collection }

literal_absent = { K_null | K_missing }

literal_scalar = _{ literal_ion | literal_primitive }
literal_primitive = _{ literal_string | literal_bool | literal_number /* TODO more literals*/ }
literal_ion = { "`" ~ ( !"`" ~ ANY)  ~ "`" } // TODO handle ion literals with embedded '`'

literal_tuple = {
    "{" ~ (literal_string ~ ":" ~ literal ~ ("," ~ literal_string ~ ":" ~ literal )* )? ~ "}"
}

literal_collection = _{ literal_array | literal_bag }
literal_array = { "[" ~ (literal ~ ("," ~ literal)* )? ~ "]" }
literal_bag = { "<<" ~ (literal ~ ("," ~ literal)* )? ~ ">>" }

literal_string = @{ "'" ~ ( "''" | !"'" ~ ANY )* ~ "'"}
literal_bool = { K_true | K_false }
literal_number = _{ literal_real | literal_int }
literal_int = @{  ASCII_DIGIT+ }
literal_real = @{
      ASCII_DIGIT+ ~ "." ~ (ASCII_DIGIT+)? ~ ( ^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+ )?
    | (ASCII_DIGIT+)? ~ "." ~ ASCII_DIGIT+ ~ ( ^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+ )?
    | ASCII_DIGIT+ ~ ^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+
}


// ------------------------------------------------------------------------------ //
//                                                                                //
//                                 Identifiers                                    //
//                                                                                //
// ------------------------------------------------------------------------------ //

identifier = { identifier_unquoted | identifier_quoted }

identifier_unquoted = @{
    !(reserved_clause) ~ identifier_unquoted_first ~ identifier_unquoted_rest*
}
identifier_unquoted_first = _{ "_" | "$" | ASCII_ALPHA }
identifier_unquoted_rest = _{ identifier_unquoted_first | ASCII_DIGIT }

identifier_quoted = @{ "\"" ~ identifier_quoted_content* ~ "\"" }
identifier_quoted_content = {
      "\"\""
    | !"\"" ~ ANY
}

// ------------------------------------------------------------------------------ //
//                                                                                //
//                                   Keywords                                     //
//                                                                                //
// ------------------------------------------------------------------------------ //

reserved_clause = @{
    (reserved_sql_clause | reserved_partiql_clause)
}

reserved_sql_clause = {
      K_with
    | K_select
    | K_from
    | K_where
    | K_group
    | K_having
    | K_union
    | K_intersect
    | K_except
    | K_all
    | K_order
    | K_by
    | K_limit
    | K_offset
}

reserved_partiql_clause = {
        K_pivot
      | K_unpivot
      | K_preserve
}

reserved_join = @{
      K_cross | K_join | K_left | K_right | K_full | K_natural | K_inner | K_outer | K_on | K_using
}


K_all               = _{ ^"all" }
K_asc               = _{ ^"asc" }
K_and               = _{ ^"and" }
K_as                = _{ ^"as" }
K_at                = _{ ^"at" }
K_by                = _{ ^"by" }
K_cross             = _{ ^"cross" }
K_desc              = _{ ^"desc" }
K_except            = _{ ^"except" }
K_false             = _{ ^"false" }
K_first             = _{ ^"first" }
K_full              = _{ ^"full" }
K_from              = _{ ^"from" }
K_group             = _{ ^"group" }
K_having            = _{ ^"having" }
K_inner             = _{ ^"inner" }
K_intersect         = _{ ^"intersect" }
K_join              = _{ ^"join" }
K_last              = _{ ^"last" }
K_lateral           = _{ ^"lateral" }
K_left              = _{ ^"left" }
K_limit             = _{ ^"limit" }
K_missing           = _{ ^"missing" }
K_natural           = _{ ^"natural" }
K_null              = _{ ^"null" }
K_nulls             = _{ ^"nulls" }
K_offset            = _{ ^"offset" }
K_on                = _{ ^"on" }
K_or                = _{ ^"or" }
K_order             = _{ ^"order" }
K_outer             = _{ ^"outer" }
K_pivot             = _{ ^"pivot" }
K_preserve          = _{ ^"preserve" }
K_right             = _{ ^"right" }
K_select            = _{ ^"select" }
K_true              = _{ ^"true" }
K_union             = _{ ^"union" }
K_unpivot           = _{ ^"unpivot" }
K_using             = _{ ^"using" }
K_value             = _{ ^"value" }
K_where             = _{ ^"where" }
K_with              = _{ ^"with" }

